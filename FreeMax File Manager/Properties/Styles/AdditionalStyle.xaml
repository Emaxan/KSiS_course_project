<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:p="clr-namespace:FreeMax_File_Manager.Properties.UserSettings.Colors"
                    xmlns:mwf="clr-namespace:FreeMax_File_Manager.Properties.UserSettings.Text.MainWindow"
                    xmlns:swf="clr-namespace:FreeMax_File_Manager.Properties.UserSettings.Text.SettingsWindow"
                    xmlns:awt="clr-namespace:FreeMax_File_Manager.Properties.UserSettings.Text.AdditionalWindow">

    <!--Main Window-->

    <Style x:Key="MainWindowTitleStyle" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static mwf:Fonts.Default}, Path=Заголовок, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>

    <Style x:Key="TopPanelStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Margin" Value="5,0,5,0"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static mwf:Fonts.Default}, Path=Верхняя_панель, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>
    
    <Style x:Key="TopPanelActiveStyle" BasedOn="{StaticResource TopPanelStyle}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:MainWindowColors.Default}, Path=Нажатые_клавиши, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>
    
    <Style x:Key="TopPanelPasiveStyle" BasedOn="{StaticResource TopPanelStyle}" TargetType="TextBlock">
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:MainWindowColors.Default}, Path=Ненажатые_клавиши, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>

    <Style x:Key="BottomPanelStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="TextWrapping" Value="NoWrap"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Margin" Value="10,0,10,0"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static mwf:Fonts.Default}, Path=Нижняя_панель, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:MainWindowColors.Default}, Path=Ненажатые_клавиши, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>
    
    <Style x:Key="MiddleLeftPanelStyle" TargetType="ListBox">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{Binding Source={x:Static p:MainWindowColors.Default}, Path=Фон_левого_окна, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:MainWindowColors.Default}, Path=Тескт_левого_окна, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static mwf:Fonts.Default}, Path=Средняя_левая_панель, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>

    <Style x:Key="MiddleRigthPanelStyle" TargetType="ListBox">
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
        <Setter Property="Background" Value="{Binding Source={x:Static p:MainWindowColors.Default}, Path=Фон_правого_окна, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:MainWindowColors.Default}, Path=Текст_правого_окна, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static mwf:Fonts.Default}, Path=Средняя_правая_панель, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>

    <!--Settings Window-->

    <Style x:Key="SettinsWindowTitleStyle" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static swf:Fonts.Default}, Path=Заголовок, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Заголовок, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>

    <Style x:Key="StackPanelElementsStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="0"/>
        <Setter Property="Padding" Value="5,0,5,0"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static swf:Fonts.Default}, Path=Верхняя_панель, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Текст, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>
    
    <Style x:Key="StackPanelActiveStyle" BasedOn="{StaticResource StackPanelElementsStyle}" TargetType="TextBlock">
        <Setter Property="Background" Value="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Фон_активного_меню, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>
 
    <Style x:Key="StackPanelPasiveStyle" BasedOn="{StaticResource StackPanelElementsStyle}" TargetType="TextBlock">
        <Setter Property="Background" Value="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Фон, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>
    
    <Style x:Key="ButtonSettingsStyle" TargetType="TextBlock">
        <Setter Property="Margin" Value="50,20,50,20"/>
        <Setter Property="Padding" Value="0,10,0,0"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static swf:Fonts.Default}, Path=Нижняя_панель, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Background" Value="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Фон_кнопок, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Текст_кнопок, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>

    <Style x:Key="SettingElementTextStyleBase" TargetType="TextBlock">
        <Setter Property="TextAlignment" Value="Left"/>
        <Setter Property="Text" Value="{Binding Path=GoodName}"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="FontSize" Value="15"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Текст, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>
    
    <Style x:Key="SettingElementTextStyle" TargetType="TextBlock" BasedOn="{StaticResource SettingElementTextStyleBase}">
        <Setter Property="FontFamily" Value="{Binding Source={x:Static swf:Fonts.Default}, Path=Элемент_настроек, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>
    
    <!--Additional Window-->
    
    <Style x:Key="AdditionalWindowTitleStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="FontSize" Value="20"/>
        <Setter Property="Margin" Value="10"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static awt:Fonts.Default}, Path=Заголовок, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:AdditionalWindowColors.Default}, Path=Заголовок}"/>
        <Setter Property="Text" Value="{Binding Source={x:Static awt:Text.Default},Path=Title, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>
    
    <Style x:Key="AdditionalWindowTextBlockStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static awt:Fonts.Default}, Path=Текст, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="TextWrapping" Value="Wrap"/>
        <Setter Property="Margin" Value="20"/>
        <Setter Property="Padding" Value="20"/>
        <Setter Property="Background" Value="{Binding Source={x:Static p:AdditionalWindowColors.Default}, Path=Фон_текста}"/>
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:AdditionalWindowColors.Default}, Path=Текст}"/>
        <Setter Property="Text" Value="{Binding Source={x:Static awt:Text.Default},Path=Content,Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>
    
    <Style x:Key="AdditionalWindowButtonStyle" TargetType="TextBlock">
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="TextAlignment" Value="Center"/>
        <Setter Property="Height" Value="Auto"/>
        <Setter Property="Width" Value="Auto"/>
        <Setter Property="FontSize" Value="25"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static awt:Fonts.Default}, Path=Кнопки, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="Margin" Value="20"/>
        <Setter Property="Background" Value="{Binding Source={x:Static p:AdditionalWindowColors.Default}, Path=Фон_кнопки}"/>
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:AdditionalWindowColors.Default}, Path=Текст_кнопки}"/>
    </Style>

    <Style x:Key="Drives" TargetType="RadioButton">
        <Setter Property="Margin" Value="10"/>
        <Setter Property="FontFamily" Value="{Binding Source={x:Static awt:Fonts.Default}, Path=Текст, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
        <Setter Property="Foreground" Value="{Binding Source={x:Static p:AdditionalWindowColors.Default}, Path=Текст, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    </Style>
    
    <!--General-->
    
    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="0.5" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="FocusVisualInvis">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="2" SnapsToDevicePixels="true" Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" StrokeThickness="0" StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="ScrollBarButton" TargetType="{x:Type RepeatButton}">
    	<Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}"/>
    	<Setter Property="BorderThickness" Value="1"/>
    	<Setter Property="HorizontalContentAlignment" Value="Center"/>
    	<Setter Property="VerticalContentAlignment" Value="Center"/>
    	<Setter Property="Padding" Value="1"/>
    	<Setter Property="Focusable" Value="false"/>
    	<Setter Property="IsTabStop" Value="false"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type RepeatButton}">
    				<Border x:Name="border" BorderThickness="0" SnapsToDevicePixels="true">
    					<ContentPresenter x:Name="contentPresenter" Focusable="False" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
    				</Border>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="RepeatButtonTransparent" TargetType="{x:Type RepeatButton}">
    	<Setter Property="OverridesDefaultStyle" Value="true"/>
    	<Setter Property="Background" Value="Transparent"/>
    	<Setter Property="Focusable" Value="false"/>
    	<Setter Property="IsTabStop" Value="false"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type RepeatButton}">
    				<Rectangle Fill="{TemplateBinding Background}" Height="{TemplateBinding Height}" Width="{TemplateBinding Width}"/>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <SolidColorBrush x:Key="ScrollBar.Static.Thumb" Color="{Binding Source={x:Static p:MainWindowColors.Default}, Path=Ползунок_сдайдера, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    <SolidColorBrush x:Key="ScrollBar.Static.Background" Color="{Binding Source={x:Static p:MainWindowColors.Default}, Path=Фон_слайдера, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    <Style x:Key="ScrollBarThumbVertical" TargetType="{x:Type Thumb}">
    	<Setter Property="OverridesDefaultStyle" Value="true"/>
    	<Setter Property="IsTabStop" Value="false"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Thumb}">
    				<Rectangle x:Name="rectangle" Fill="{StaticResource ScrollBar.Static.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}" RadiusX="10" RadiusY="10"/>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>
    <Style x:Key="ScrollBarThumbHorizontal" TargetType="{x:Type Thumb}">
    	<Setter Property="OverridesDefaultStyle" Value="true"/>
    	<Setter Property="IsTabStop" Value="false"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type Thumb}">
    				<Rectangle x:Name="rectangle" Fill="{StaticResource ScrollBar.Static.Thumb}" Height="{TemplateBinding Height}" SnapsToDevicePixels="True" Width="{TemplateBinding Width}"/>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    </Style>

    <Style x:Key="MyScrollBarStyle" TargetType="{x:Type ScrollBar}">
    	<Setter Property="Stylus.IsPressAndHoldEnabled" Value="false"/>
    	<Setter Property="Stylus.IsFlicksEnabled" Value="false"/>
        <Setter Property="Background" Value="{StaticResource ScrollBar.Static.Background}"/>
    	<Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
    	<Setter Property="Width" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    	<Setter Property="MinWidth" Value="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}"/>
    	<Setter Property="Template">
    		<Setter.Value>
    			<ControlTemplate TargetType="{x:Type ScrollBar}">
    				<Grid x:Name="Bg" SnapsToDevicePixels="true">
    					<Grid.RowDefinitions>
    						<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
    						<RowDefinition Height="0.00001*"/>
    						<RowDefinition MaxHeight="{DynamicResource {x:Static SystemParameters.VerticalScrollBarButtonHeightKey}}"/>
    					</Grid.RowDefinitions>
    					<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0" Background="{TemplateBinding Background}" Grid.Row="0" Grid.RowSpan="3" CornerRadius="10"/>
    					<RepeatButton Grid.Row="0" x:Name="PART_LineUpButton" Visibility="Collapsed" Command="{x:Static ScrollBar.LineUpCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
    						<Path x:Name="ArrowTop" Data="" Margin="3,4,3,3" Stretch="Uniform"/>
    					</RepeatButton>
    					<Track x:Name="PART_Track" IsDirectionReversed="true" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="0" Grid.RowSpan="3" >
    						<Track.DecreaseRepeatButton>
    							<RepeatButton Command="{x:Static ScrollBar.PageUpCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
    						</Track.DecreaseRepeatButton>
    						<Track.IncreaseRepeatButton>
    							<RepeatButton Command="{x:Static ScrollBar.PageDownCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
    						</Track.IncreaseRepeatButton>
    						<Track.Thumb>
    							<Thumb Style="{StaticResource ScrollBarThumbVertical}"/>
    						</Track.Thumb>
    					</Track>
    					<RepeatButton x:Name="PART_LineDownButton" Visibility="Collapsed" Command="{x:Static ScrollBar.LineDownCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Grid.Row="2" Style="{StaticResource ScrollBarButton}">
    						<Path x:Name="ArrowBottom" Data="" Margin="3,4,3,3" Stretch="Uniform"/>
    					</RepeatButton>
    				</Grid>
    			</ControlTemplate>
    		</Setter.Value>
    	</Setter>
    	<Style.Triggers>
    		<Trigger Property="Orientation" Value="Horizontal">
    			<Setter Property="Width" Value="Auto"/>
    			<Setter Property="MinWidth" Value="0"/>
    			<Setter Property="Height" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
    			<Setter Property="MinHeight" Value="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarHeightKey}}"/>
    			<Setter Property="Template">
    				<Setter.Value>
    					<ControlTemplate TargetType="{x:Type ScrollBar}">
    						<Grid x:Name="Bg" SnapsToDevicePixels="true">
    							<Grid.ColumnDefinitions>
    								<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
    								<ColumnDefinition Width="0.00001*"/>
    								<ColumnDefinition MaxWidth="{DynamicResource {x:Static SystemParameters.HorizontalScrollBarButtonWidthKey}}"/>
    							</Grid.ColumnDefinitions>
    							<Border BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Grid.Column="0" Grid.ColumnSpan="3" CornerRadius="10"/>
    							<RepeatButton Grid.Column="0" x:Name="PART_LineLeftButton" Visibility="Collapsed" Command="{x:Static ScrollBar.LineLeftCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
    								<Path x:Name="ArrowLeft" Data="" Margin="3" Stretch="Uniform"/>
    							</RepeatButton>
    							<Track x:Name="PART_Track" Grid.Column="1" IsEnabled="{TemplateBinding IsMouseOver}">
    								<Track.DecreaseRepeatButton>
    									<RepeatButton Command="{x:Static ScrollBar.PageLeftCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
    								</Track.DecreaseRepeatButton>
    								<Track.IncreaseRepeatButton>
    									<RepeatButton Command="{x:Static ScrollBar.PageRightCommand}" Style="{StaticResource RepeatButtonTransparent}"/>
    								</Track.IncreaseRepeatButton>
    								<Track.Thumb>
    									<Thumb Style="{StaticResource ScrollBarThumbHorizontal}"/>
    								</Track.Thumb>
    							</Track>
    							<RepeatButton x:Name="PART_LineRightButton" Visibility="Collapsed" Grid.Column="2" Command="{x:Static ScrollBar.LineRightCommand}" IsEnabled="{TemplateBinding IsMouseOver}" Style="{StaticResource ScrollBarButton}">
    								<Path x:Name="ArrowRight" Data="" Margin="3" Stretch="Uniform"/>
    							</RepeatButton>
    						</Grid>
    					</ControlTemplate>
    				</Setter.Value>
    			</Setter>
    		</Trigger>
    	</Style.Triggers>
    </Style>

    <SolidColorBrush x:Key="Item.SelectedActive.Background" Color="{Binding Source={x:Static p:MainWindowColors.Default}, Path=Фон_выделенного_элемента, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    <SolidColorBrush x:Key="Item.SelectedActive.Border" Color="{Binding Source={x:Static p:MainWindowColors.Default}, Path=Граница_выделенного_элемента,Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    <Style x:Key="MyListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding Path=IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsSelected, UpdateSourceTrigger=PropertyChanged}" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Background}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.Border}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <SolidColorBrush x:Key="Item.SelectedActive.BackgroundSw" Color="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Фон_активного_подменю, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    <SolidColorBrush x:Key="Item.SelectedActive.BorderSw" Color="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Рамка,Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    <SolidColorBrush x:Key="ActiveElem" Color="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Активный_цветовой_канал, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    <SolidColorBrush x:Key="DeactiveElem" Color="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Текст, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}"/>
    <Style x:Key="MyListBoxItemStyleSw" TargetType="{x:Type ListBoxItem}">
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="Padding" Value="4,1"/>
        <Setter Property="HorizontalContentAlignment" Value="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="VerticalContentAlignment" Value="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="Transparent"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Focusable" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ListBoxItem}">
                    <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                        <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock Grid.Column="0" Width="Auto" Style="{DynamicResource SettingElementTextStyle}" MinWidth="400"/>
                            <TextBlock x:Name="Minus" Grid.Column="1" Width="Auto" Text=" - " Style="{DynamicResource SettingElementTextStyle}" MinWidth="20"/>
                            <Border 
                                x:Name="Border"
                                Grid.Column="2" 
                                Margin="0,2,0,2"
                                BorderThickness="0.5" 
                                BorderBrush="{Binding Source={x:Static p:SettingsWindowColors.Default}, Path=Рамка, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}"
                                Width="280" 
                                CornerRadius="5"     
                                HorizontalAlignment="Stretch" 
                                VerticalAlignment="Stretch" 
                                Background="{Binding Path=Color}"/>
                            <TextBlock x:Name="Plus" Grid.Column="3" Width="Auto" Text=" + " Style="{DynamicResource SettingElementTextStyle}" MinWidth="20"/>
                            <TextBlock x:Name="Sharp" Grid.Column="4" Width="Auto" Text="#" Style="{DynamicResource SettingElementTextStyle}" MinWidth="10" Margin="00,0,0,0"/>
                            <TextBlock x:Name="TAlpha" Grid.Column="4" Width="Auto" Text="{Binding Path=A}" Style="{DynamicResource SettingElementTextStyle}" MinWidth="25" Margin="10,0,0,0" Foreground="{TemplateBinding SolidColorBrush.Color}"/>
                            <TextBlock x:Name="TRed" Grid.Column="4" Width="Auto" Text="{Binding Path=R}" Style="{DynamicResource SettingElementTextStyle}" MinWidth="25" Margin="35,0,0,0" Foreground="{TemplateBinding SolidColorBrush.Color}"/>
                            <TextBlock x:Name="TGreen" Grid.Column="4" Width="Auto" Text="{Binding Path=G}" Style="{DynamicResource SettingElementTextStyle}" MinWidth="25" Margin="60,0,0,0" Foreground="{TemplateBinding SolidColorBrush.Color}"/>
                            <TextBlock x:Name="TBlue" Grid.Column="4" Width="Auto" Text="{Binding Path=B}" Style="{DynamicResource SettingElementTextStyle}" MinWidth="25" Margin="85,0,0,0" Foreground="{TemplateBinding SolidColorBrush.Color}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="False">
                            <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                        </Trigger>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.BackgroundSw}"/>
                            <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.BorderSw}"/>
                        </Trigger>
                        <DataTrigger Binding="{Binding Path=Editable}" Value="false">
                            <Setter TargetName="Minus" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Border" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Plus" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="Sharp" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="TAlpha" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="TBlue" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="TGreen" Property="Visibility" Value="Collapsed"/>
                            <Setter TargetName="TRed" Property="Visibility" Value="Collapsed"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=Editable}" Value="true">
                            <Setter TargetName="Minus" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Border" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Plus" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="Sharp" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="TAlpha" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="TBlue" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="TGreen" Property="Visibility" Value="Visible"/>
                            <Setter TargetName="TRed" Property="Visibility" Value="Visible"/>
                        </DataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Active, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="0"/>
                                <Condition Binding="{Binding Path=IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="TAlpha" Property="Foreground" Value="{StaticResource ActiveElem}"/>
                            <Setter TargetName="TRed" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                            <Setter TargetName="TGreen" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                            <Setter TargetName="TBlue" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Active, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="1"/>
                                <Condition Binding="{Binding Path=IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="TAlpha" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                            <Setter TargetName="TRed" Property="Foreground" Value="{StaticResource ActiveElem}"/>
                            <Setter TargetName="TGreen" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                            <Setter TargetName="TBlue" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Active, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="2"/>
                                <Condition Binding="{Binding Path=IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="TAlpha" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                            <Setter TargetName="TRed" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                            <Setter TargetName="TGreen" Property="Foreground" Value="{StaticResource ActiveElem}"/>
                            <Setter TargetName="TBlue" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                        </MultiDataTrigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Path=Active, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="3"/>
                                <Condition Binding="{Binding Path=IsSelected, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter TargetName="TAlpha" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                            <Setter TargetName="TRed" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                            <Setter TargetName="TGreen" Property="Foreground" Value="{StaticResource DeactiveElem}"/>
                            <Setter TargetName="TBlue" Property="Foreground" Value="{StaticResource ActiveElem}"/>
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding Path=ColorSet}" Value="False">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Border x:Name="Bd" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}" SnapsToDevicePixels="true">
                                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Background="Transparent">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <TextBlock Grid.Column="0" Width="Auto" Style="{DynamicResource SettingElementTextStyle}" MinWidth="400"/>
                                    <TextBlock x:Name="Minus" Grid.Column="1" Width="Auto" Text="-" Style="{DynamicResource SettingElementTextStyle}" MinWidth="20" />
                                    <TextBlock 
                                        x:Name="Example"
                                        Grid.Column="2" 
                                        Margin="0,2,0,2"
                                        Style="{DynamicResource SettingElementTextStyleBase}"
                                        FontFamily="{Binding Path=Font}"
                                        Width="250"/>
                                    <TextBlock x:Name="Plus" Grid.Column="3" Width="Auto" Text="+" Style="{DynamicResource SettingElementTextStyle}" MinWidth="20"/>
                                    <TextBlock x:Name="FontName"  Grid.Column="4" Width="Auto" Style="{DynamicResource SettingElementTextStyle}" Text="{Binding Path=Text}" MinWidth="60"/>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsSelected" Value="False">
                                    <Setter Property="Background" TargetName="Bd" Value="Transparent"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="Transparent"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter Property="Background" TargetName="Bd" Value="{StaticResource Item.SelectedActive.BackgroundSw}"/>
                                    <Setter Property="BorderBrush" TargetName="Bd" Value="{StaticResource Item.SelectedActive.BorderSw}"/>
                                </Trigger>
                                <DataTrigger Binding="{Binding Path=Editable}" Value="false">
                                    <Setter TargetName="Minus" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="Example" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="Plus" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="FontName" Property="Visibility" Value="Collapsed"/>
                                </DataTrigger>
                                <DataTrigger Binding="{Binding Path=Editable}" Value="true">
                                    <Setter TargetName="Minus" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="Example" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="Plus" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="FontName" Property="Visibility" Value="Visible"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </DataTrigger>
        </Style.Triggers>
    </Style>

</ResourceDictionary>